{
    // task  statement
    "Task Statement": {
        "prefix": [
            "task",
        ],
        "body": [
            "task @${1:name}()",
            "\t$0",
            "end"
        ],
        "description": "Task Statement"
    },
    // task implicit return statement
    "Task Arrow": {
        "prefix": [
            "task-arrow",
        ],
        "body": [
            "task @${1:name}(${2:args}) -> ",
        ],
        "description": "Task Arrow"
    },
    "Task Statement with Arguments": {
        "prefix": [
            "task-arg",
        ],
        "body": [
            "task @${1:name}(${2:args})",
            "\t$0",
            "end"
        ],
        "description": "Task Statement with Arguments"
    },
    // object statement
    "Object Statement": {
        "prefix": [
            "object",
        ],
        "body": [
            "object ${1:Name}",
            "\t$0",
            "end"
        ],
        "description": "Object Statement"
    },
    // class statement
    "Class Statement": {
        "prefix": [
            "class",
        ],
        "body": [
            "class ${1:Name}()",
            "\tdef ${1:name}(${2:args})\n\n\tend",
            "end"
        ],
        "description": "Class Statement"
    },
    // def statement
    "Def Statement": {
        "prefix": [
            "def",
        ],
        "body": [
            "def ${1:name}(${2:args})",
            "\t$0",
            "end"
        ],
        "description": "Def Statement"
    },
    // for i = 1 to 10 then statement
    "For-To Loop": {
        "prefix": [
            "for-to"
        ],
        "body": [
            "for i = ${1:1} to ${2:n} then",
            "\t$0",
            "end"
        ],
        "description": "For-To Loop"
    },
    // if statement
    "If Statement": {
        "prefix": [
            "if"
        ],
        "body": [
            "if ${1:condition} then",
            "\t$0",
            "end"
        ],
        "description": "If Statement"
    },
    // print statement
    "Print Statement": {
        "prefix": [
            "print"
        ],
        "body": [
            "print(${1:text})",
        ],
        "description": "Print Statement"
    },
    // println statement
    "Println Statement": {
        "prefix": [
            "println"
        ],
        "body": [
            "println(${1:text})",
        ],
        "description": "Println Statement"
    },
    // import statement
    "Get Statement": {
        "prefix": [
            "get"
        ],
        "body": [
            "get {${1:module}} from \"${2:path}\"",
        ],
        "description": "Get ... from ..."
    },
    // comment
    "Comment": {
        "prefix": [
            "#"
        ],
        "body": [
            "# ${1:comment}",
        ],
        "description": "Comment"
    },
    // let statement
    "Let Statement": {
        "prefix": [
            "let"
        ],
        "body": [
            "let ${1:name} = \"${2:value}\"",
        ],
        "description": "Let Statement"
    },
    // final statement
    "Final Statement": {
        "prefix": [
            "final"
        ],
        "body": [
            "final ${1:name} = \"${2:value}\"",
        ],
        "description": "Final Statement"
    },
    // Export statement
    "Export Statement": {
        "prefix": [
            "export"
        ],
        "body": [
            "export ${1:name}",
        ],
        "description": "Export Statement"
    },
    // Docstring statement
    "Docstring Statement": {
        "prefix": [
            "docstring"
        ],
        "body": [
            "`${1:value}`",
        ],
        "description": "Docstring Statement"
    },
}