{
    // Function  statement
    "Function Statement": {
        "prefix": [
            "def",
        ],
        "body": [
            "def @${1:name}()",
            "\t$0",
            "end"
        ],
        "description": "Function Statement"
    },
    // def implicit return statement
    "Function Arrow": {
        "prefix": [
            "def-arrow",
        ],
        "body": [
            "def @${1:name}(${2:args}) -> ",
        ],
        "description": "Function Arrow"
    },
    "Function Statement with Arguments": {
        "prefix": [
            "def-arg",
        ],
        "body": [
            "def @${1:name}(${2:args})",
            "\t$0",
            "end"
        ],
        "description": "Function Statement with Arguments"
    },
    "Function Annonymous": {
        "prefix": [
            "def-anon",
        ],
        "body": [
            "def ${1:name}(${2:args})",
            "\t$0",
            "end"
        ],
        "description": "Function Annonymous"
    },
    // object statement
    "Object Statement": {
        "prefix": [
            "object",
        ],
        "body": [
            "object ${1:Name}",
            "\t$0",
            "end"
        ],
        "description": "Object Statement"
    },
    // module statement
    "Module Statement": {
        "prefix": [
            "module",
        ],
        "body": [
            "module ${1:Export} as ${2:Module}",
            "\t$0",
            "end"
        ],
        "description": "Module Statement"
    },
    // class statement
    "Class Statement": {
        "prefix": [
            "class",
        ],
        "body": [
            "class ${1:Name}()",
            "\tdef init(${2:self})\n\n\tend",
            "end"
        ],
        "description": "Class Statement"
    },
    // for-to statement
    "For-To Loop": {
        "prefix": [
            "for-to"
        ],
        "body": [
            "for i = ${1:1} to ${2:n}:",
            "\t$0",
            "end"
        ],
        "description": "For-To Loop"
    },
    // in statement
    "In Statement": {
        "prefix": [
            "in"
        ],
        "body": [
            "in ${1:names} as ${2:name}:",
            "\t$0",
            "end"
        ],
        "description": "In Statement"
    },
    // if statement
    "If Statement": {
        "prefix": [
            "if"
        ],
        "body": [
            "if ${1:condition}:",
            "\t$0",
            "end"
        ],
        "description": "If Statement"
    },
    // else if statement
    "Else If Statement": {
        "prefix": [
            "elif"
        ],
        "body": [
            "elif ${1:condition}:",
            "\t$0",
        ],
        "description": "Else If Statement"
    },
    // else statement
    "Else Statement": {
        "prefix": [
            "else"
        ],
        "body": [
            "else:",
            "\t$0",
        ],
        "description": "Else Statement"
    },
    // while statement
    "While Statement": {
        "prefix": [
            "while"
        ],
        "body": [
            "while ${1:condition}:",
            "\t$0",
            "end"
        ],
        "description": "While Statement"
    },
    // attempt statement
    "Attempt Statement": {
        "prefix": [
            "attempt"
        ],
        "body": [
            "attempt:",
            "\ncatch ${1:Exception}:\n\t$0",
            "end"
        ],
        "description": "Attempt Statement"
    },
    // catch statement
    "Catch Statement": {
        "prefix": [
            "catch"
        ],
        "body": [
            "catch ${1:exception}:",
            "\t$0"
        ],
        "description": "Catch Statement"
    },
    // finally statement
    "Finally Statement": {
        "prefix": [
            "finally"
        ],
        "body": [
            "finally:",
            "\t$0",
        ],
        "description": "Finally Statement"
    },
    // match statement
    "Match Statement": {
        "prefix": [
            "match"
        ],
        "body": [
            "match ${1:expression}:",
            "\tcase ${2:value}:\n\n\tend",
            "\tdefault:\n\n\tend",
            "end"
        ],
        "description": "Match Statement"
    },
    // case statement
    "Case Statement": {
        "prefix": [
            "case"
        ],
        "body": [
            "case ${1:value}:",
            "\t$0",
            "end"
        ],
        "description": "Case Statement"
    },
    // print statement
    "Print Statement": {
        "prefix": [
            "print"
        ],
        "body": [
            "print(${1:text})",
        ],
        "description": "Print Statement"
    },
    // println statement
    "Println Statement": {
        "prefix": [
            "println"
        ],
        "body": [
            "println(${1:text})",
        ],
        "description": "Println Statement"
    },
    // import statement
    "Import Statement": {
        "prefix": [
            "import"
        ],
        "body": [
            "import ${1:module} from \"${2:path}\"",
        ],
        "description": "import ... from ..."
    },
    // comment
    "Comment": {
        "prefix": [
            "#"
        ],
        "body": [
            "# ${1:comment}",
        ],
        "description": "Comment"
    },
    // let statement
    "Let Statement": {
        "prefix": [
            "let"
        ],
        "body": [
            "let ${1:name} = \"${2:value}\"",
        ],
        "description": "Let Statement"
    },
    // final statement
    "Final Statement": {
        "prefix": [
            "final"
        ],
        "body": [
            "final ${1:name} = \"${2:value}\"",
        ],
        "description": "Final Statement"
    },
    
    // Export statement
    "Export Statement": {
        "prefix": [
            "export"
        ],
        "body": [
            "export ${1:name}",
        ],
        "description": "Export Statement"
    },
    // Docstring statement
    "Documentation Statement": {
        "prefix": [
            "documentation"
        ],
        "body": [
            "/**\n\t*${1:value}\t\n*/",
        ],
        "description": "Documentation Statement"
    },
}