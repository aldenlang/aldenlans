{
	"%schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "alden",
	"patterns": [
		{
			"include": "#keywords"
		},
		{
			"include": "#expression"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#fm-string-double"
		},
		{
			"include": "#fm-string-single"
		},
		{
			"include": "#fm-string-backtick"
		},
		{
			"include": "#variables"
		},
		{
			"include": "#control-statement"
		},
		{
			"include": "#numbers"
		},
		{
			"include": "#comments"
		},
		{
			"include": "#operators"
		},
		{
			"include": "#constants"
		},
		{
			"include": "#punctuation"
		},
		{
			"include": "#identifiers"
		},
		{
			"include": "#escape_chars"
		}
	],
	"repository": {
		"statements": {
			"patterns": [
				{
					"include": "#keywords"
				},
				{
					"include": "#declarations"
				},
				{
					"include": "#control-statement"
				},
				{
					"include": "#after-operator-block-as-object-literal"
				},
				{
					"include": "#decl-block"
				},
				{
					"include": "#label"
				},
				{
					"include": "#expression"
				},
				{
					"include": "#punctuation-semicolon"
				},
				{
					"include": "#string"
				},
				{
					"include": "#comment"
				},
				{
					"include": "#fm-string-double"
				},
				{
					"include": "#fm-string-single"
				},
				{
					"include": "#fm-string-backtick"
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"comment": "Single line comment",
					"name": "comment.line.number-sign.alden",
					"match": "#[^\n\r]*"
				},
				{
					"comment": "Keywords",
					"name": "keyword.control.alden",
					"match": "\\b(if|elif|else|then|while|object|module|class|def|end|for|in|as|return|break|to|continue|yeild|void|import|from|export|attempt|catch|finally|match|case|default|not|notin|and|or|raise|freeze)\\b"
				},
				{
					"comment": "let variable keyword",
					"name": "keyword.control.let.alden",
					"begin": "\\b(let)\\b",
					"end": "\\s",
					"patterns": [
						{
							"include": "#identifiers"
						}
					]
				},
				{
					"comment": "final constant keyword",
					"name": "keyword.control.flow.alden",
					"match": "\\b(final)\\b"
				},
				{
					"comment": "Boolean type",
					"name": "keyword.operator.logical.alden",
					"match": "\\b(bool)\\b"
				},
				{
					"comment": "Int type",
					"name": "keyword.operator.logical.alden",
					"match": "\\b(int)\\b"
				},
				{
					"comment": "Float type",
					"name": "keyword.operator.logical.alden",
					"match": "\\b(float)\\b"
				},
				{
					"comment": "Binary type",
					"name": "keyword.operator.logical.alden",
					"match": "\\b(bytes)\\b"
				},
				{
					"comment": "String type",
					"name": "keyword.operator.logical.alden",
					"match": "\\b(str)\\b"
				},
				{
					"comment": "List type",
					"name": "keyword.operator.logical.alden",
					"match": "\\b(list)\\b"
				},
				{
					"comment": "Pair type",
					"name": "keyword.operator.logical.alden",
					"match": "\\b(pair)\\b"
				},
				{
					"comment": "Dict type",
					"name": "keyword.operator.logical.alden",
					"match": "\\b(dict)\\b"
				},
				{
					"comment": "Char type",
					"name": "keyword.operator.logical.alden",
					"match": "\\b(chr)\\b"
				},
				{
					"comment": "Ord type",
					"name": "keyword.operator.logical.alden",
					"match": "\\b(ord)\\b"
				},
				{
					"comment": "Object type",
					"name": "keyword.operator.logical.alden",
					"match": "\\b(obj)\\b"
				},
				{
					"comment": "BuiltIn type",
					"name": "keyword.operator.logical.alden",
					"match": "\\b(builtin)\\b"
				},
				{
					"comment": "special variable",
					"name": "keyword.operator.logical.alden",
					"match": "\\b__@([a-zA-Z_][a-zA-Z0-9_]*)__([a-zA-Z_][a-zA-Z0-9__]*)?\\b"
				},	
				{
					"comment": "Object properties",
					"name": "entity.name.type.object.property.alden",
					"match": "\\b(\\.\\w+)\\b"
				},
				{
					"comment": "Format String type",
					"name": "keyword.control.format.alden",
					"match": "\\bfm\\b"
				},
				{
					"comment": "Binary string type",
					"name": "keyword.control.binary.alden",
					"match": "\\bbn\\b"
				},
				{
					"comment": "Unicode string type",
					"name": "keyword.control.unicode.alden",
					"match": "\\bun\\b"
				},
				{
					"comment": "Format braces",
					"name": "keyword.control.format.braces.alden",
					"match": "\\\"{w+}\\\""
				},
				{
					"comment": "Self keyword",
					"name": "keyword.control.self.alden",
					"match": "\\bself\\b"
				},
				{
					"comment": "Conditional operators",
					"name": "keyword.operator.conditional.alden",
					"match": "\\b(and|or|not)\\b"
				},
				{
					"comment": "Boolean literals",
					"name": "constant.language.boolean.alden",
					"match": "\\b(true|false)\\b"
				},
				{
					"comment": "None literal",
					"name": "constant.language.none.alden",
					"match": "\\b(none)\\b"
				},
				{
					"comment": "Binary literals",
					"name": "constant.numeric.binary.alden",
					"match": "0b[01]+"
				},
				{
					"comment": "Integer literals",
					"name": "constant.numeric.integer.alden",
					"match": "\\b(0x[0-9a-fA-F]+|[0-9]+)\\b"
				},
				{
					"comment": "Float literals",
					"name": "constant.numeric.float.alden",
					"match": "\\b[0-9]+\\.[0-9]+\\b"
				},
				{
					"comment": "Declaration type",
					"name": "storage.type.declaration.alden",
					"match": "\\b(let|final)\\b"
				}
			]
		},
		"declaration": {
			"patterns": [
				{
					"include": "#decorator"
				},
				{
					"include": "#var-expr"
				},
				{
					"include": "#function-declaration"
				},
				{
					"include": "#class-declaration"
				},
				{
					"include": "#interface-declaration"
				},
				{
					"include": "#enum-declaration"
				},
				{
					"include": "#namespace-declaration"
				},
				{
					"include": "#type-alias-declaration"
				},
				{
					"include": "#import-equals-declaration"
				},
				{
					"include": "#import-declaration"
				},
				{
					"include": "#export-declaration"
				},
				{
					"name": "storage.modifier.alden",
					"match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(declare|export)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
				}
			]
		},
		"control-statement": {
			"patterns": [
				{
					"include": "#switch-statement"
				},
				{
					"include": "#for-loop"
				},
				{
					"name": "keyword.control.trycatch.alden",
					"match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(catch|finally|throw|try)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
				},
				{
					"match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(break|continue|goto)\\s+([_$[:alpha:]][_$[:alnum:]]*)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))",
					"captures": {
						"1": {
							"name": "keyword.control.loop.alden"
						},
						"2": {
							"name": "entity.name.label.alden"
						}
					}
				},
				{
					"name": "keyword.control.loop.alden",
					"match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(break|continue|do|goto|while)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
				},
				{
					"begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(return)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))",
					"beginCaptures": {
						"0": {
							"name": "keyword.control.flow.alden"
						}
					},
					"end": "(?=[;}]|$|;|^\\s*$|(?:^\\s*(?:abstract|async|class|const|declare|enum|export|function|import|interface|let|module|namespace|return|type|var)\\b))",
					"patterns": [
						{
							"include": "#expression"
						}
					]
				},
				{
					"name": "keyword.control.switch.alden",
					"match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(case|default|switch)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
				},
				{
					"include": "#if-statement"
				},
				{
					"name": "keyword.control.conditional.alden",
					"match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(else|if)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
				},
				{
					"name": "keyword.control.with.alden",
					"match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(with)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
				},
				{
					"name": "keyword.control.alden",
					"match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(package)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
				},
				{
					"name": "keyword.other.debugger.alden",
					"match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(debugger)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
				}
			]
		},
		"label": {
			"patterns": [
				{
					"begin": "([_$[:alpha:]][_$[:alnum:]]*)\\s*(:)(?=\\s*\\{)",
					"beginCaptures": {
						"1": {
							"name": "entity.name.label.alden"
						},
						"2": {
							"name": "punctuation.separator.label.alden"
						}
					},
					"end": "(?<=\\})",
					"patterns": [
						{
							"include": "#decl-block"
						}
					]
				},
				{
					"match": "([_$[:alpha:]][_$[:alnum:]]*)\\s*(:)",
					"captures": {
						"1": {
							"name": "entity.name.label.alden"
						},
						"2": {
							"name": "punctuation.separator.label.alden"
						}
					}
				}
			]
		},
		"expression": {
			"patterns": [
				{
					"include": "#expressionWithoutIdentifiers"
				},
				{
					"include": "#identifiers"
				},
				{
					"include": "#expressionPunctuations"
				},
				{
					"include": "#dot-object-notation"
				}
			]
		},
		"expressionWithoutIdentifiers": {
			"patterns": [
				{
					"include": "#aldenx"
				},
				{
					"include": "#string"
				},
				{
					"include": "#comment"
				},
				{
					"include": "#class-expression"
				},
				{
					"include": "#function-call"
				},
				{
					"include": "#literal"
				}
			]
		},
		"expressionPunctuations": {
			"patterns": [
				{
					"include": "#punctuation-comma"
				},
				{
					"include": "#punctuation-accessor"
				}
			]
		},
		"fm-string-backtick": {
			"patterns": [
				{
					"include": "#fm-string-backtick-call"
				},
				{
					"name": "string.fm-string-backtick.alden",
					"begin": "([_%[:alpha:]][_%[:alnum:]]*)?(`)",
					"beginCaptures": {
						"1": {
							"name": "entity.name.function.tagged-fm-string-backtick.alden"
						},
						"2": {
							"name": "punctuation.definition.string.fm-string-backtick.begin.alden"
						}
					},
					"end": "`",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.fm-string-backtick.end.alden"
						}
					},
					"patterns": [
						{
							"include": "#fm-string-backtick-substitution-element"
						},
						{
							"include": "#string-character-escape"
						}
					]
				}
			]
		},
		"fm-string-backtick-call": {
			"patterns": [
				{
					"name": "string.fm-string-backtick.alden",
					"begin": "(?=(([_%[:alpha:]][_%[:alnum:]]*\\s*\\??\\.\\s*)*|(\\??\\.\\s*)?)([_%[:alpha:]][_%[:alnum:]]*)(<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_%[:alpha:]][_%[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_%[:alpha:]][_%[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))(([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_%[:alpha:]][_%[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>)*(?<!=)\\>))*(?<!=)\\>)*(?<!=)>\\s*)?`)",
					"end": "(?=`)",
					"patterns": [
						{
							"begin": "(?=(([_%[:alpha:]][_%[:alnum:]]*\\s*\\??\\.\\s*)*|(\\??\\.\\s*)?)([_%[:alpha:]][_%[:alnum:]]*))",
							"end": "(?=(<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_%[:alpha:]][_%[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_%[:alpha:]][_%[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))(([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_%[:alpha:]][_%[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>)*(?<!=)\\>))*(?<!=)\\>)*(?<!=)>\\s*)?`)",
							"patterns": [
								{
									"include": "#support-function-call-identifiers"
								},
								{
									"name": "entity.name.function.tagged-fm-string-backtick.alden",
									"match": "([_%[:alpha:]][_%[:alnum:]]*)"
								}
							]
						},
						{
							"include": "#type-arguments"
						}
					]
				},
				{
					"name": "string.fm-string-backtick.alden",
					"begin": "([_%[:alpha:]][_%[:alnum:]]*)?\\s*(?=(<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_%[:alpha:]][_%[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_%[:alpha:]][_%[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))(([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_%[:alpha:]][_%[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>)*(?<!=)\\>))*(?<!=)\\>)*(?<!=)>\\s*)`)",
					"beginCaptures": {
						"1": {
							"name": "entity.name.function.tagged-fm-string-backtick.alden"
						}
					},
					"end": "(?=`)",
					"patterns": [
						{
							"include": "#type-arguments"
						}
					]
				}
			]
		},
		"fm-string-backtick-substitution-element": {
			"patterns": [
				{
					"name": "meta.fm-string-backtick.expression.alden",
					"begin": "\\%\\{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.fm-string-backtick-expression.begin.alden"
						}
					},
					"end": "\\}",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.fm-string-backtick-expression.end.alden"
						}
					},
					"patterns": [
						{
							"include": "#expression"
						}
					],
					"contentName": "variable.other.fm-string-backtick-expression.alden"
				},
				{
					"name": "",
					"begin": "\\%%\\{{",
					"beginCaptures": {
						"0": {
							"name": ""
						}
					},
					"end": "\\}}",
					"endCaptures": {
						"0": {
							"name": ""
						}
					},
					"contentName": "meta.fm-string-backtick.expression.alden"
				}
			]
		},
		"fm-string-backtick-type": {
			"patterns": [
				{
					"include": "#fm-string-backtick-call"
				},
				{
					"name": "string.fm-string-backtick.alden",
					"begin": "([_%[:alpha:]][_%[:alnum:]]*)?(`)",
					"beginCaptures": {
						"1": {
							"name": "entity.name.function.tagged-fm-string-backtick.alden"
						},
						"2": {
							"name": "punctuation.definition.string.fm-string-backtick.begin.alden"
						}
					},
					"end": "`",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.fm-string-backtick.end.alden"
						}
					},
					"patterns": [
						{
							"include": "#fm-string-backtick-type-substitution-element"
						},
						{
							"include": "#string-character-escape"
						}
					]
				}
			]
		},
		"fm-string-backtick-type-substitution-element": {
			"name": "meta.fm-string-backtick.expression.alden",
			"begin": "\\%\\{",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.fm-string-backtick-expression.begin.alden"
				}
			},
			"end": "\\}",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.fm-string-backtick-expression.end.alden"
				}
			},
			"patterns": [
				{
					"include": "#type"
				}
			],
			"contentName": "variable.other.fm-string-backtick-expression.alden"
		},
		"fm-string-double": {
			"patterns": [
				{
					"include": "#fm-string-double-call"
				},
				{
					"name": "string.fm-string-double.alden",
					"begin": "([_%[:alpha:]][_%[:alnum:]]*)?(\")",
					"beginCaptures": {
						"1": {
							"name": "entity.name.function.tagged-fm-string-double.alden"
						},
						"2": {
							"name": "punctuation.definition.string.fm-string-double.begin.alden"
						}
					},
					"end": "\"",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.fm-string-double.end.alden"
						}
					},
					"patterns": [
						{
							"include": "#fm-string-double-substitution-element"
						},
						{
							"include": "#string-character-escape"
						}
					]
				}
			]
		},
		"fm-string-double-call": {
			"patterns": [
				{
					"name": "string.fm-string-double.alden",
					"begin": "(?=(([_%[:alpha:]][_%[:alnum:]]*\\s*\\??\\.\\s*)*|(\\??\\.\\s*)?)([_%[:alpha:]][_%[:alnum:]]*)(<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_%[:alpha:]][_%[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\\"([^\\\"\\\\]|\\\\.)*\\\"))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_%[:alpha:]][_%[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\\"([^\\\"\\\\]|\\\\.)*\\\"))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))(([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_%[:alpha:]][_%[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\\"([^\\\"\\\\]|\\\\.)*\\\"))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>)*(?<!=)\\>))*(?<!=)\\>)*(?<!=)>\\s*)?\")",
					"end": "(?=\")",
					"patterns": [
						{
							"begin": "(?=(([_%[:alpha:]][_%[:alnum:]]*\\s*\\??\\.\\s*)*|(\\??\\.\\s*)?)([_%[:alpha:]][_%[:alnum:]]*))",
							"end": "(?=(<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_%[:alpha:]][_%[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\\"([^\\\"\\\\]|\\\\.)*\\\"))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_%[:alpha:]][_%[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\\"([^\\\"\\\\]|\\\\.)*\\\"))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))(([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_%[:alpha:]][_%[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\\"([^\\\"\\\\]|\\\\.)*\\\"))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>)*(?<!=)\\>))*(?<!=)\\>)*(?<!=)>\\s*)?\")",
							"patterns": [
								{
									"include": "#support-function-call-identifiers"
								},
								{
									"name": "entity.name.function.tagged-fm-string-double.alden",
									"match": "([_%[:alpha:]][_%[:alnum:]]*)"
								}
							]
						},
						{
							"include": "#type-arguments"
						}
					]
				},
				{
					"name": "string.fm-string-double.alden",
					"begin": "([_%[:alpha:]][_%[:alnum:]]*)?\\s*(?=(<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_%[:alpha:]][_%[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\\"([^\\\"\\\\]|\\\\.)*\\\"))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_%[:alpha:]][_%[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\\"([^\\\"\\\\]|\\\\.)*\\\"))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))(([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_%[:alpha:]][_%[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\\"([^\\\"\\\\]|\\\\.)*\\\"))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>)*(?<!=)\\>))*(?<!=)\\>)*(?<!=)>\\s*)\")",
					"beginCaptures": {
						"0": {
							"name": "entity.name.function.tagged-fm-string-double.alden"
						}
					},
					"end": "(?=\")",
					"patterns": [
						{
							"include": "#type-arguments"
						}
					]
				}
			]
		},
		"fm-string-double-substitution-element": {
			"patterns": [
				{
					"name": "meta.fm-string-double.expression.alden",
					"begin": "\\%\\{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.fm-string-double-expression.begin.alden"
						}
					},
					"end": "\\}",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.fm-string-double-expression.end.alden"
						}
					},
					"patterns": [
						{
							"include": "#expression"
						}
					],
					"contentName": "variable.other.fm-string-double.expression.alden"
				},
				{
					"name": "",
					"begin": "\\%%\\{{",
					"beginCaptures": {
						"0": {
							"name": ""
						}
					},
					"end": "\\}}",
					"endCaptures": {
						"0": {
							"name": ""
						}
					},
					"contentName": "meta.fm-string-double.expression.alden"
				}
			]
		},
		"fm-string-double-type": {
			"patterns": [
				{
					"include": "#fm-string-double-call"
				},
				{
					"name": "string.fm-string-double.alden",
					"begin": "([_%[:alpha:]][_%[:alnum:]]*)?(\")",
					"beginCaptures": {
						"1": {
							"name": "entity.name.function.tagged-fm-string-double.alden"
						},
						"2": {
							"name": "punctuation.definition.string.fm-string-double.begin.alden"
						}
					},
					"end": "\"\"\"",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.fm-string-double.end.alden"
						}
					},
					"patterns": [
						{
							"include": "#fm-string-double-substitution-element"
						},
						{
							"include": "#string-character-escape"
						}
					]
				}
			]
		},
		"fm-string-double-type-substitution-element": {
			"name": "meta.fm-string-double.expression.alden",
			"begin": "\\%\\{",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.fm-string-double-expression.begin.alden"
				}
			},
			"end": "\\}",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.fm-string-double-expression.end.alden"
				}
			},
			"patterns": [
				{
					"include": "#type"
				}
			],
			"contentName": "variable.other.fm-string-double.expression.alden"
		},
		"fm-string-single": {
			"patterns": [
				{
					"include": "#fm-string-single-call"
				},
				{
					"name": "string.fm-string-single.alden",
					"begin": "([_%[:alpha:]][_%[:alnum:]]*)?(')",
					"beginCaptures": {
						"1": {
							"name": "entity.name.function.tagged-fm-string-single.alden"
						},
						"2": {
							"name": "punctuation.definition.string.fm-string-single.begin.alden"
						}
					},
					"end": "'",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.fm-string-single.end.alden"
						}
					},
					"patterns": [
						{
							"include": "#fm-string-single-substitution-element"
						},
						{
							"include": "#string-character-escape"
						}
					]
				}
			]
		},
		"fm-string-single-call": {
			"patterns": [
				{
					"name": "string.fm-string-single.alden",
					"begin": "(?=(([_%[:alpha:]][_%[:alnum:]]*\\s*\\??\\.\\s*)*|(\\??\\.\\s*)?)([_%[:alpha:]][_%[:alnum:]]*)(<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_%[:alpha:]][_%[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\'([^\\'\\\\]|\\\\.)*\\'))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_%[:alpha:]][_%[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\'([^\\'\\\\]|\\\\.)*\\'))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))(([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_%[:alpha:]][_%[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\'([^\\'\\\\]|\\\\.)*\\'))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>)*(?<!=)\\>))*(?<!=)\\>)*(?<!=)>\\s*)?')",
					"end": "(?=')",
					"patterns": [
						{
							"begin": "(?=(([_%[:alpha:]][_%[:alnum:]]*\\s*\\??\\.\\s*)*|(\\??\\.\\s*)?)([_%[:alpha:]][_%[:alnum:]]*))",
							"end": "(?=(<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_%[:alpha:]][_%[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_%[:alpha:]][_%[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))(([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_%[:alpha:]][_%[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>)*(?<!=)\\>))*(?<!=)\\>)*(?<!=)>\\s*)?`)",
							"patterns": [
								{
									"include": "#support-function-call-identifiers"
								},
								{
									"name": "entity.name.function.tagged-fm-string-single.alden",
									"match": "([_%[:alpha:]][_%[:alnum:]]*)"
								}
							]
						},
						{
							"include": "#type-arguments"
						}
					]
				},
				{
					"name": "string.fm-string-single.alden",
					"begin": "([_%[:alpha:]][_%[:alnum:]]*)?\\s*(?=(<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_%[:alpha:]][_%[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_%[:alpha:]][_%[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))(([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_%[:alpha:]][_%[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>)*(?<!=)\\>))*(?<!=)\\>)*(?<!=)>\\s*)`)",
					"beginCaptures": {
						"1": {
							"name": "entity.name.function.tagged-fm-string-single.alden"
						}
					},
					"end": "(?=`)",
					"patterns": [
						{
							"include": "#type-arguments"
						}
					]
				}
			]
		},
		"fm-string-single-substitution-element": {
			"patterns": [
				{
					"name": "meta.fm-string-single.expression.alden",
					"begin": "\\%\\{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.fm-string-single-expression.begin.alden"
						}
					},
					"end": "\\}",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.fm-string-single-expression.end.alden"
						}
					},
					"patterns": [
						{
							"include": "#expression"
						},
						{
							"include": "#type-arguments"
						}
					],
					"contentName": "variable.other.fm-string-single-expression.alden"
				},
				{
					"name": "",
					"begin": "\\%%\\{{",
					"beginCaptures": {
						"0": {
							"name": ""
						}
					},
					"end": "\\}}",
					"endCaptures": {
						"0": {
							"name": ""
						}
					},
					"contentName": "meta.fm-string-single.expression.alden"
				}
			]
		},
		"fm-string-single-type": {
			"patterns": [
				{
					"include": "#fm-string-single-call"
				},
				{
					"name": "string.fm-string-single-type.alden",
					"begin": "([_%[:alpha:]][_%[:alnum:]]*)?(')",
					"beginCaptures": {
						"1": {
							"name": "entity.name.function.tagged-fm-string-single.alden"
						},
						"2": {
							"name": "punctuation.definition.string.fm-string-single.begin.alden"
						}
					},
					"end": "'",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.fm-string-single.end.alden"
						}
					},
					"patterns": [
						{
							"include": "#fm-string-single-substitution-element"
						},
						{
							"include": "#string-character-escape"
						}
					]
				}
			]
		},
		"fm-string-single-type-substitution-element": {
			"patterns": [
				{
					"name": "meta.fm-string-single.expression.alden",
					"begin": "\\%\\{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.fm-string-single-expression.begin.alden"
						}
					},
					"end": "\\}",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.fm-string-single-expression.end.alden"
						}
					},
					"patterns": [
						{
							"include": "#type"
						}
					],
					"contentName": "variable.other.fm-string-single-expression.alden"
				}
			]
		},	
		"variable-initializer": {
			"patterns": [
				{
					"begin": "(?<!=|!)(=)(?!=)(?=\\s*\\S)(?!\\s*.*=>\\s*$)",
					"beginCaptures": {
						"1": {
							"name": "keyword.operator.assignment.alden"
						}
					},
					"end": "(?=$|^|[,);}\\]]|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+))",
					"patterns": [
						{
							"include": "#expression"
						}
					]
				},
				{
					"begin": "(?<!=|!)(=)(?!=)",
					"beginCaptures": {
						"1": {
							"name": "keyword.operator.assignment.alden"
						}
					},
					"end": "(?=[,);}\\]]|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+))|(?=^\\s*$)|(?<=\\S)(?<!=)(?=\\s*$)",
					"patterns": [
						{
							"include": "#expression"
						}
					]
				}
			]
		},
		"function-declaration": {
			"name": "meta.function.alden",
			"begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?(?:(async)\\s+)?(function\\b)(?:\\s*(\\*))?(?:(?:\\s+|(?<=\\*))([_$[:alpha:]][_$[:alnum:]]*))?\\s*",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.export.alden"
				},
				"2": {
					"name": "storage.modifier.alden"
				},
				"3": {
					"name": "storage.modifier.async.alden"
				},
				"4": {
					"name": "storage.type.function.alden"
				},
				"5": {
					"name": "keyword.generator.asterisk.alden"
				},
				"6": {
					"name": "meta.definition.function.alden entity.name.function.alden"
				}
			},
			"end": "(?=;|^\\s*$|(?:^\\s*(?:abstract|async|class|const|declare|enum|export|function|import|interface|let|module|namespace|return|type|var)\\b))|(?<=\\})",
			"patterns": [
				{
					"include": "#function-name"
				},
				{
					"include": "#function-body"
				}
			]
		},
		"function-expression": {
			"name": "meta.function.expression.alden",
			"begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(async)\\s+)?(function\\b)(?:\\s*(\\*))?(?:(?:\\s+|(?<=\\*))([_$[:alpha:]][_$[:alnum:]]*))?\\s*",
			"beginCaptures": {
				"1": {
					"name": "storage.modifier.async.alden"
				},
				"2": {
					"name": "storage.type.function.alden"
				},
				"3": {
					"name": "keyword.generator.asterisk.alden"
				},
				"4": {
					"name": "meta.definition.function.alden entity.name.function.alden"
				}
			},
			"end": "(?=;)|(?<=\\})",
			"patterns": [
				{
					"include": "#function-name"
				},
				{
					"include": "#single-line--consuming-line-ending"
				},
				{
					"include": "#function-body"
				}
			]
		},
		"function-name": {
			"name": "meta.definition.function.alden entity.name.function.alden",
			"match": "[_$[:alpha:]][_$[:alnum:]]*"
		},
		"function-body": {
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#type-parameters"
				},
				{
					"include": "#function-parameters"
				},
				{
					"include": "#return-type"
				},
				{
					"include": "#type-function-return-type"
				},
				{
					"include": "#decl-block"
				},
				{
					"name": "keyword.generator.asterisk.alden",
					"match": "\\*"
				}
			]
		},
		"indexer-mapped-type-declaration": {
			"name": "meta.indexer.mappedtype.declaration.alden",
			"begin": "(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))([+-])?(readonly)\\s*)?\\s*(\\[)\\s*([_$[:alpha:]][_$[:alnum:]]*)\\s+(in)\\s+",
			"beginCaptures": {
				"1": {
					"name": "keyword.operator.type.modifier.alden"
				},
				"2": {
					"name": "storage.modifier.alden"
				},
				"3": {
					"name": "meta.brace.square.alden"
				},
				"4": {
					"name": "entity.name.type.alden"
				},
				"5": {
					"name": "keyword.operator.expression.in.alden"
				}
			},
			"end": "(\\])([+-])?\\s*(\\?\\s*)?|$",
			"endCaptures": {
				"1": {
					"name": "meta.brace.square.alden"
				},
				"2": {
					"name": "keyword.operator.type.modifier.alden"
				},
				"3": {
					"name": "keyword.operator.optional.alden"
				}
			},
			"patterns": [
				{
					"match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(as)\\s+",
					"captures": {
						"1": {
							"name": "keyword.control.as.alden"
						}
					}
				},
				{
					"include": "#type"
				}
			]
		},
		"function-parameters": {
			"name": "meta.parameters.alden",
			"begin": "\\(",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.parameters.begin.alden"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.parameters.end.alden"
				}
			},
			"patterns": [
				{
					"include": "#function-parameters-body"
				}
			]
		},
		"function-parameters-body": {
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#string"
				},
				{
					"include": "#decorator"
				},
				{
					"include": "#destructuring-parameter"
				},
				{
					"include": "#parameter-name"
				},
				{
					"include": "#parameter-type-annotation"
				},
				{
					"include": "#variable-initializer"
				},
				{
					"name": "punctuation.separator.parameter.alden",
					"match": ","
				}
			]
		},
		"class-declaration": {
			"name": "meta.class.alden",
			"begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(?:(abstract)\\s+)?\\b(class)\\b(?=\\s+|/[/*])",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.export.alden"
				},
				"2": {
					"name": "storage.modifier.alden"
				},
				"3": {
					"name": "storage.modifier.alden"
				},
				"4": {
					"name": "storage.type.class.alden"
				}
			},
			"end": "(?<=\\})",
			"patterns": [
				{
					"include": "#class-declaration-or-expression-patterns"
				}
			]
		},
		"class-expression": {
			"name": "meta.class.alden",
			"begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(abstract)\\s+)?(class)\\b(?=\\s+|[<{]|\\/[\\/*])",
			"beginCaptures": {
				"1": {
					"name": "storage.modifier.alden"
				},
				"2": {
					"name": "storage.type.class.alden"
				}
			},
			"end": "(?<=\\})",
			"patterns": [
				{
					"include": "#class-declaration-or-expression-patterns"
				}
			]
		},
		"class-declaration-or-expression-patterns": {
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#class-or-interface-heritage"
				},
				{
					"match": "[_$[:alpha:]][_$[:alnum:]]*",
					"captures": {
						"0": {
							"name": "entity.name.type.class.alden"
						}
					}
				},
				{
					"include": "#type-parameters"
				},
				{
					"include": "#class-or-interface-body"
				}
			]
		},
		"interface-declaration": {
			"name": "meta.interface.alden",
			"begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(?:(abstract)\\s+)?\\b(interface)\\b(?=\\s+|/[/*])",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.export.alden"
				},
				"2": {
					"name": "storage.modifier.alden"
				},
				"3": {
					"name": "storage.modifier.alden"
				},
				"4": {
					"name": "storage.type.interface.alden"
				}
			},
			"end": "(?<=\\})",
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#class-or-interface-heritage"
				},
				{
					"match": "[_$[:alpha:]][_$[:alnum:]]*",
					"captures": {
						"0": {
							"name": "entity.name.type.interface.alden"
						}
					}
				},
				{
					"include": "#type-parameters"
				},
				{
					"include": "#class-or-interface-body"
				}
			]
		},
		"class-or-interface-heritage": {
			"begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:\\b(extends|implements)\\b)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))",
			"beginCaptures": {
				"1": {
					"name": "storage.modifier.alden"
				}
			},
			"end": "(?=\\{)",
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#class-or-interface-heritage"
				},
				{
					"include": "#type-parameters"
				},
				{
					"include": "#expressionWithoutIdentifiers"
				},
				{
					"match": "([_$[:alpha:]][_$[:alnum:]]*)\\s*(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))(?=\\s*[_$[:alpha:]][_$[:alnum:]]*(\\s*\\??\\.\\s*[_$[:alpha:]][_$[:alnum:]]*)*\\s*)",
					"captures": {
						"1": {
							"name": "entity.name.type.module.alden"
						},
						"2": {
							"name": "punctuation.accessor.alden"
						},
						"3": {
							"name": "punctuation.accessor.optional.alden"
						}
					}
				},
				{
					"match": "([_$[:alpha:]][_$[:alnum:]]*)",
					"captures": {
						"1": {
							"name": "entity.other.inherited-class.alden"
						}
					}
				},
				{
					"include": "#expressionPunctuations"
				}
			]
		},
		"class-or-interface-body": {
			"begin": "\\{",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.block.alden"
				}
			},
			"end": "\\}",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.block.alden"
				}
			},
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#decorator"
				},
				{
					"begin": "(?<=:)\\s*",
					"end": "(?=\\s|[;),}\\]:\\-\\+]|;|^\\s*$|(?:^\\s*(?:abstract|async|class|const|declare|enum|export|function|import|interface|let|module|namespace|return|type|var)\\b))",
					"patterns": [
						{
							"include": "#expression"
						}
					]
				},
				{
					"include": "#method-declaration"
				},
				{
					"include": "#indexer-declaration"
				},
				{
					"include": "#field-declaration"
				},
				{
					"include": "#string"
				},
				{
					"include": "#type-annotation"
				},
				{
					"include": "#variable-initializer"
				},
				{
					"include": "#access-modifier"
				},
				{
					"include": "#property-accessor"
				},
				{
					"include": "#async-modifier"
				},
				{
					"include": "#after-operator-block-as-object-literal"
				},
				{
					"include": "#decl-block"
				},
				{
					"include": "#expression"
				},
				{
					"include": "#punctuation-comma"
				},
				{
					"include": "#punctuation-semicolon"
				}
			]
		},
		"ternary-expression": {
			"begin": "(?!\\?\\.\\s*[^[:digit:]])(\\?)(?!\\?)",
			"beginCaptures": {
				"1": {
					"name": "keyword.operator.ternary.alden"
				}
			},
			"end": "\\s*(:)",
			"endCaptures": {
				"1": {
					"name": "keyword.operator.ternary.alden"
				}
			},
			"patterns": [
				{
					"include": "#expression"
				}
			]
		},
		"function-call": {
			"patterns": [
				{
					"comment": "Function name",
					"match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b\\(",
					"captures": {
						"1": {
							"name": "entity.name.function.alden"
						}
					}
				}
			]
		},
		"function-call-target": {
			"patterns": [
				{
					"include": "#support-function-call-identifiers"
				},
				{
					"name": "entity.name.function.alden",
					"match": "(\\#?[_$[:alpha:]][_$[:alnum:]]*)"
				}
			]
		},
		"function-call-optionals": {
			"patterns": [
				{
					"name": "meta.function-call.alden punctuation.accessor.optional.alden",
					"match": "\\?\\."
				},
				{
					"name": "meta.function-call.alden keyword.operator.definiteassignment.alden",
					"match": "\\!"
				}
			]
		},
		"paren-expression-possibly-arrow": {
			"patterns": [
				{
					"begin": "(?<=[(=,])\\s*(async)?(?=\\s*((<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*))?\\(\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))",
					"beginCaptures": {
						"1": {
							"name": "storage.modifier.async.alden"
						}
					},
					"end": "(?<=\\))",
					"patterns": [
						{
							"include": "#paren-expression-possibly-arrow-with-typeparameters"
						}
					]
				},
				{
					"begin": "(?<=[(=,]|=>|^return|[^\\._$[:alnum:]]return)\\s*(async)?(?=\\s*((((<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*))?\\()|(<))\\s*$)",
					"beginCaptures": {
						"1": {
							"name": "storage.modifier.async.alden"
						}
					},
					"end": "(?<=\\))",
					"patterns": [
						{
							"include": "#paren-expression-possibly-arrow-with-typeparameters"
						}
					]
				},
				{
					"include": "#possibly-arrow-return-type"
				}
			]
		},
		"paren-expression-possibly-arrow-with-typeparameters": {
			"patterns": [
				{
					"include": "#type-parameters"
				},
				{
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "meta.brace.round.alden"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "meta.brace.round.alden"
						}
					},
					"patterns": [
						{
							"include": "#expression-inside-possibly-arrow-parens"
						}
					]
				}
			]
		},
		"expression-inside-possibly-arrow-parens": {
			"patterns": [
				{
					"include": "#expressionWithoutIdentifiers"
				},
				{
					"include": "#comment"
				},
				{
					"include": "#string"
				},
				{
					"include": "#decorator"
				},
				{
					"include": "#destructuring-parameter"
				},
				{
					"match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(override|public|protected|private|readonly)\\s+(?=(override|public|protected|private|readonly)\\s+)",
					"captures": {
						"1": {
							"name": "storage.modifier.alden"
						}
					}
				},
				{
					"match": "(?x)(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(override|public|private|protected|readonly)\\s+)?(?:(\\.\\.\\.)\\s*)?(?<!=|:)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(this)|([_$[:alpha:]][_$[:alnum:]]*))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))\\s*(\\??)(?=\\s*\n# function assignment |\n(=\\s*(\n  ((async\\s+)?(\n    (function\\s*[(<*]) |\n    (function\\s+) |\n    ([_$[:alpha:]][_$[:alnum:]]*\\s*=>)\n  )) |\n  ((async\\s*)?(\n    ((<\\s*$)|([\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |\n    # sure shot arrow functions even if => is on new line\n(\n  (<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?\n  [(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*\n  (\n    ([)]\\s*:) |                                                                                       # ():\n    ((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)                                                                  # [(]param: | [(]...param:\n  )\n) |\n(\n  [<]\\s*[_$[:alpha:]][_$[:alnum:]]*\\s+extends\\s*[^=>]                                                              # < typeparam extends\n) |\n# arrow function possible to detect only with => on same line\n(\n  (<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?                                                                                 # typeparameters\n  \\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\\"\\\"]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\\"([^\\\"\\\\]|\\\\.)*\\\"))*)?\\)   # parameters\n  (\\s*:\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?                                                                        # return type\n  \\s*=>                                                                                               # arrow operator\n)\n  ))\n)) |\n# typeannotation is fn type: < | () | (... | (param: | (param, | (param? | (param= | (param) =>\n(:\\s*(\n  (<) |\n  ([(]\\s*(\n    ([)]) |\n    (\\.\\.\\.) |\n    ([_$[:alnum:]]+\\s*(\n      ([:,?=])|\n      ([)]\\s*=>)\n    ))\n  ))\n)) |\n(:\\s*(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))Function(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))) |\n(:\\s*((<\\s*$)|([\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*))))))) |\n(:\\s*(=>|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(<[^<>]*>)|[^<>(),=])+=\\s*(\n  ((async\\s+)?(\n    (function\\s*[(<*]) |\n    (function\\s+) |\n    ([_$[:alpha:]][_$[:alnum:]]*\\s*=>)\n  )) |\n  ((async\\s*)?(\n    ((<\\s*$)|([\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |\n    # sure shot arrow functions even if => is on new line\n(\n  (<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?\n  [(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*\n  (\n    ([)]\\s*:) |                                                                                       # ():\n    ((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)                                                                  # [(]param: | [(]...param:\n  )\n) |\n(\n  [<]\\s*[_$[:alpha:]][_$[:alnum:]]*\\s+extends\\s*[^=>]                                                              # < typeparam extends\n) |\n# arrow function possible to detect only with => on same line\n(\n  (<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?                                                                                 # typeparameters\n  \\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\\"\\\"]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\\"([^\\\"\\\\]|\\\\.)*\\\"))*)?\\)   # parameters\n  (\\s*:\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?                                                                        # return type\n  \\s*=>                                                                                               # arrow operator\n)\n  ))\n)))",
					"captures": {
						"1": {
							"name": "storage.modifier.alden"
						},
						"2": {
							"name": "keyword.operator.rest.alden"
						},
						"3": {
							"name": "entity.name.function.alden variable.language.this.alden"
						},
						"4": {
							"name": "entity.name.function.alden"
						},
						"5": {
							"name": "keyword.operator.optional.alden"
						}
					}
				},
				{
					"match": "(?x)(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(override|public|private|protected|readonly)\\s+)?(?:(\\.\\.\\.)\\s*)?(?<!=|:)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(this)|([_$[:alpha:]][_$[:alnum:]]*))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))\\s*(\\??)(?=\\s*[:,]|$)",
					"captures": {
						"1": {
							"name": "storage.modifier.alden"
						},
						"2": {
							"name": "keyword.operator.rest.alden"
						},
						"3": {
							"name": "variable.parameter.alden variable.language.this.alden"
						},
						"4": {
							"name": "variable.parameter.alden"
						},
						"5": {
							"name": "keyword.operator.optional.alden"
						}
					}
				},
				{
					"include": "#type-annotation"
				},
				{
					"include": "#variable-initializer"
				},
				{
					"name": "punctuation.separator.parameter.alden",
					"match": ","
				},
				{
					"include": "#identifiers"
				},
				{
					"include": "#expressionPunctuations"
				}
			]
		},
		"literal": {
			"patterns": [
				{
					"include": "#numeric-literal"
				},
				{
					"include": "#boolean-literal"
				},
				{
					"include": "#none-literal"
				},
				{
					"include": "#undefined-literal"
				},
				{
					"include": "#numericConstant-literal"
				},
				{
					"include": "#array-literal"
				},
				{
					"include": "#this-literal"
				},
				{
					"include": "#super-literal"
				},
				{
					"include": "#operators"
				}
			]
		},
		"array-literal": {
			"name": "meta.array.literal.alden",
			"begin": "\\s*(\\[)",
			"beginCaptures": {
				"1": {
					"name": "meta.brace.square.alden"
				}
			},
			"end": "\\]",
			"endCaptures": {
				"0": {
					"name": "meta.brace.square.alden"
				}
			},
			"patterns": [
				{
					"include": "#punctuation-comma"
				}
			]
		},
		"numeric-literal": {
			"patterns": [
				{
					"name": "constant.numeric.hex.alden",
					"match": "\\b(?<!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$)",
					"captures": {
						"1": {
							"name": "storage.type.numeric.bigint.alden"
						}
					}
				},
				{
					"name": "constant.numeric.binary.alden",
					"match": "\\b(?<!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$)",
					"captures": {
						"1": {
							"name": "storage.type.numeric.bigint.alden"
						}
					}
				},
				{
					"name": "constant.numeric.octal.alden",
					"match": "\\b(?<!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$)",
					"captures": {
						"1": {
							"name": "storage.type.numeric.bigint.alden"
						}
					}
				},
				{
					"match": "(?x)\n(?<!\\$)(?:\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)| # 1.1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # 1.E+3\n  (?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # .1E+3\n  (?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|                 # 1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|                      # 1.1\n  (?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|                                  # 1.\n  (?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|                                  # .1\n  (?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))                                 # 1\n)(?!\\$)",
					"captures": {
						"0": {
							"name": "constant.numeric.decimal.alden"
						},
						"1": {
							"name": "meta.delimiter.decimal.period.alden"
						},
						"2": {
							"name": "storage.type.numeric.bigint.alden"
						},
						"3": {
							"name": "meta.delimiter.decimal.period.alden"
						},
						"4": {
							"name": "storage.type.numeric.bigint.alden"
						},
						"5": {
							"name": "meta.delimiter.decimal.period.alden"
						},
						"6": {
							"name": "storage.type.numeric.bigint.alden"
						},
						"7": {
							"name": "storage.type.numeric.bigint.alden"
						},
						"8": {
							"name": "meta.delimiter.decimal.period.alden"
						},
						"9": {
							"name": "storage.type.numeric.bigint.alden"
						},
						"10": {
							"name": "meta.delimiter.decimal.period.alden"
						},
						"11": {
							"name": "storage.type.numeric.bigint.alden"
						},
						"12": {
							"name": "meta.delimiter.decimal.period.alden"
						},
						"13": {
							"name": "storage.type.numeric.bigint.alden"
						},
						"14": {
							"name": "storage.type.numeric.bigint.alden"
						}
					}
				}
			]
		},
		"boolean-literal": {
			"patterns": [
				{
					"name": "constant.language.boolean.true.alden",
					"match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))true(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
				},
				{
					"name": "constant.language.boolean.false.alden",
					"match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))false(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
				}
			]
		},
		"none-literal": {
			"name": "constant.language.none.alden",
			"match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))none(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
		},
		"super-literal": {
			"name": "variable.language.super.alden",
			"match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))super\\b(?!\\$)"
		},
		"operators": {
			"patterns": [
				{
					"name": "keyword.operator.arithmetic.alden",
					"match": "\\+|\\-|\\*|\\/|\\%|\\^|\\&|\\||\\<|\\>|\\=|\\!|\\~"
				},
				{
					"name": "keyword.operator.comparison.alden",
					"match": "\\=\\=|\\!\\=|\\>|\\>\\=|\\<|\\<\\="
				},
				{
					"name": "keyword.operator.logical.alden",
					"match": "\\&\\&|\\|\\|"
				},
				{
					"name": "keyword.operator.assignment.alden",
					"match": "\\="
				}
			]
		},
		"numericConstant-literal": {
			"patterns": [
				{
					"name": "constant.language.nan.alden",
					"match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))NaN(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
				},
				{
					"name": "constant.language.infinity.alden",
					"match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))Infinity(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
				}
			]
		},
		"identifiers": {
			"patterns": [
				{
					"include": "#object-identifiers"
				},
				{
					"match": "(?x)(?:(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))\\s*)?([_$[:alpha:]][_$[:alnum:]]*)(?=\\s*=\\s*(\n  ((async\\s+)?(\n    (function\\s*[(<*]) |\n    (function\\s+) |\n    ([_$[:alpha:]][_$[:alnum:]]*\\s*=>)\n  )) |\n  ((async\\s*)?(\n    ((<\\s*$)|([\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |\n    # sure shot arrow functions even if => is on new line\n(\n  (<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?\n  [(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*\n  (\n    ([)]\\s*:) |                                                                                       # ():\n    ((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)                                                                  # [(]param: | [(]...param:\n  )\n) |\n(\n  [<]\\s*[_$[:alpha:]][_$[:alnum:]]*\\s+extends\\s*[^=>]                                                              # < typeparam extends\n) |\n# arrow function possible to detect only with => on same line\n(\n  (<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?                                                                                 # typeparameters\n  \\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\\"\\\"]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\\"([^\\\"\\\\]|\\\\.)*\\\"))*)?\\)   # parameters\n  (\\s*:\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?                                                                        # return type\n  \\s*=>                                                                                               # arrow operator\n)\n  ))\n))",
					"captures": {
						"1": {
							"name": "punctuation.accessor.alden"
						},
						"2": {
							"name": "punctuation.accessor.optional.alden"
						},
						"3": {
							"name": "entity.name.function.alden"
						}
					}
				},
				{
					"match": "(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))\\s*(\\#?[[:upper:]][_$[:digit:][:upper:]]*)(?![_$[:alnum:]])",
					"captures": {
						"1": {
							"name": "punctuation.accessor.alden"
						},
						"2": {
							"name": "punctuation.accessor.optional.alden"
						},
						"3": {
							"name": "variable.other.constant.property.alden"
						}
					}
				},
				{
					"match": "(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))\\s*(\\#?[_$[:alpha:]][_$[:alnum:]]*)",
					"captures": {
						"1": {
							"name": "punctuation.accessor.alden"
						},
						"2": {
							"name": "punctuation.accessor.optional.alden"
						},
						"3": {
							"name": "variable.other.property.alden"
						}
					}
				},
				{
					"name": "variable.other.constant.alden",
					"match": "([[:upper:]][_$[:digit:][:upper:]]*)(?![_$[:alnum:]])"
				},
				{
					"name": "variable.other.readwrite.alden",
					"match": "[_$[:alpha:]][_$[:alnum:]]*"
				}
			]
		},
		"string-character-escape": {
			"name": "constant.character.escape.alden",
			"match": "\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|u\\{[0-9A-Fa-f]+\\}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.|$)"
		},
		"regex": {
			"patterns": [
				{
					"name": "string.regexp.alden",
					"begin": "(?<!\\+\\+|--|})(?<=[=(:,\\[?+!]|^return|[^\\._$[:alnum:]]return|^case|[^\\._$[:alnum:]]case|=>|&&|\\|\\||\\*\\/)\\s*(\\/)(?![\\/*])(?=(?:[^\\/\\\\\\[\\()]|\\\\.|\\[([^\\]\\\\]|\\\\.)+\\]|\\(([^\\)\\\\]|\\\\.)+\\))+\\/([dgimsuy]+|(?![\\/\\*])|(?=\\/\\*))(?!\\s*[a-zA-Z0-9_$]))",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.string.begin.alden"
						}
					},
					"end": "(/)([dgimsuy]*)",
					"endCaptures": {
						"1": {
							"name": "punctuation.definition.string.end.alden"
						},
						"2": {
							"name": "keyword.other.alden"
						}
					},
					"patterns": [
						{
							"include": "#regexp"
						}
					]
				},
				{
					"name": "string.regexp.alden",
					"begin": "((?<![_$[:alnum:])\\]]|\\+\\+|--|}|\\*\\/)|((?<=^return|[^\\._$[:alnum:]]return|^case|[^\\._$[:alnum:]]case))\\s*)\\/(?![\\/*])(?=(?:[^\\/\\\\\\[]|\\\\.|\\[([^\\]\\\\]|\\\\.)*\\])+\\/([dgimsuy]+|(?![\\/\\*])|(?=\\/\\*))(?!\\s*[a-zA-Z0-9_$]))",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.alden"
						}
					},
					"end": "(/)([dgimsuy]*)",
					"endCaptures": {
						"1": {
							"name": "punctuation.definition.string.end.alden"
						},
						"2": {
							"name": "keyword.other.alden"
						}
					},
					"patterns": [
						{
							"include": "#regexp"
						}
					]
				}
			]
		},
		"regexp": {
			"patterns": [
				{
					"name": "keyword.control.anchor.regexp",
					"match": "\\\\[bB]|\\^|\\$"
				},
				{
					"match": "\\\\[1-9]\\d*|\\\\k<([a-zA-Z_$][\\w$]*)>",
					"captures": {
						"0": {
							"name": "keyword.other.back-reference.regexp"
						},
						"1": {
							"name": "variable.other.regexp"
						}
					}
				},
				{
					"name": "keyword.operator.quantifier.regexp",
					"match": "[?+*]|\\{(\\d+,\\d+|\\d+,|,\\d+|\\d+)\\}\\??"
				},
				{
					"name": "keyword.operator.or.regexp",
					"match": "\\|"
				},
				{
					"name": "meta.group.assertion.regexp",
					"begin": "(\\()((\\?=)|(\\?!)|(\\?<=)|(\\?<!))",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.group.regexp"
						},
						"2": {
							"name": "punctuation.definition.group.assertion.regexp"
						},
						"3": {
							"name": "meta.assertion.look-ahead.regexp"
						},
						"4": {
							"name": "meta.assertion.negative-look-ahead.regexp"
						},
						"5": {
							"name": "meta.assertion.look-behind.regexp"
						},
						"6": {
							"name": "meta.assertion.negative-look-behind.regexp"
						}
					},
					"end": "(\\))",
					"endCaptures": {
						"1": {
							"name": "punctuation.definition.group.regexp"
						}
					},
					"patterns": [
						{
							"include": "#regexp"
						}
					]
				},
				{
					"name": "meta.group.regexp",
					"begin": "\\((?:(\\?:)|(?:\\?<([a-zA-Z_$][\\w$]*)>))?",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.group.regexp"
						},
						"1": {
							"name": "punctuation.definition.group.no-capture.regexp"
						},
						"2": {
							"name": "variable.other.regexp"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.group.regexp"
						}
					},
					"patterns": [
						{
							"include": "#regexp"
						}
					]
				},
				{
					"name": "constant.other.character-class.set.regexp",
					"begin": "(\\[)(\\^)?",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.character-class.regexp"
						},
						"2": {
							"name": "keyword.operator.negation.regexp"
						}
					},
					"end": "(\\])",
					"endCaptures": {
						"1": {
							"name": "punctuation.definition.character-class.regexp"
						}
					},
					"patterns": [
						{
							"name": "constant.other.character-class.range.regexp",
							"match": "(?:.|(\\\\(?:[0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}))|(\\\\c[A-Z])|(\\\\.))\\-(?:[^\\]\\\\]|(\\\\(?:[0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}))|(\\\\c[A-Z])|(\\\\.))",
							"captures": {
								"1": {
									"name": "constant.character.numeric.regexp"
								},
								"2": {
									"name": "constant.character.control.regexp"
								},
								"3": {
									"name": "constant.character.escape.backslash.regexp"
								},
								"4": {
									"name": "constant.character.numeric.regexp"
								},
								"5": {
									"name": "constant.character.control.regexp"
								},
								"6": {
									"name": "constant.character.escape.backslash.regexp"
								}
							}
						},
						{
							"include": "#regex-character-class"
						}
					]
				},
				{
					"include": "#regex-character-class"
				}
			]
		},
		"regex-character-class": {
			"patterns": [
				{
					"name": "constant.other.character-class.regexp",
					"match": "\\\\[wWsSdDtrnvf]|\\."
				},
				{
					"name": "constant.character.numeric.regexp",
					"match": "\\\\([0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4})"
				},
				{
					"name": "constant.character.control.regexp",
					"match": "\\\\c[A-Z]"
				},
				{
					"name": "constant.character.escape.backslash.regexp",
					"match": "\\\\."
				}
			]
		},
		"comment": {
			"patterns": [
				{
					"name": "comment.block.documentation.alden",
					"begin": "/\\*\\*(?!/)",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.comment.alden"
						}
					},
					"end": "\\*/",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.comment.alden"
						}
					},
					"patterns": [
						{
							"include": "#docblock"
						}
					]
				},
				{
					"name": "comment.block.alden",
					"begin": "(/\\*)(?:\\s*((@)internal)(?=\\s|(\\*/)))?",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.comment.alden"
						},
						"2": {
							"name": "storage.type.internaldeclaration.alden"
						},
						"3": {
							"name": "punctuation.decorator.internaldeclaration.alden"
						}
					},
					"end": "\\*/",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.comment.alden"
						}
					}
				}
			]
		},
		"directives": {
			"name": "comment.line.triple-slash.directive.alden",
			"begin": "^(///)\\s*(?=<(reference|amd-dependency|amd-module)(\\s+(path|types|no-default-lib|lib|name)\\s*=\\s*((\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\\"([^\\\"\\\\]|\\\\.)*\\\")))+\\s*/>\\s*$)",
			"beginCaptures": {
				"1": {
					"name": "punctuation.definition.comment.alden"
				}
			},
			"end": "(?=$)",
			"patterns": [
				{
					"name": "meta.tag.alden",
					"begin": "(<)(reference|amd-dependency|amd-module)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.tag.directive.alden"
						},
						"2": {
							"name": "entity.name.tag.directive.alden"
						}
					},
					"end": "/>",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.tag.directive.alden"
						}
					},
					"patterns": [
						{
							"name": "entity.other.attribute-name.directive.alden",
							"match": "path|types|no-default-lib|lib|name"
						},
						{
							"name": "keyword.operator.assignment.alden",
							"match": "="
						},
						{
							"include": "#string"
						}
					]
				}
			]
		},
		"docblock": {
			"patterns": [
				{
					"match": "(?x)\n((@)(?:access|api))\n\\s+\n(private|protected|public)\n\\b",
					"captures": {
						"1": {
							"name": "storage.type.class.aldendoc"
						},
						"2": {
							"name": "punctuation.definition.block.tag.aldendoc"
						},
						"3": {
							"name": "constant.language.access-type.aldendoc"
						}
					}
				},
				{
					"match": "(?x)\n((@)author)\n\\s+\n(\n  [^@\\s<>*/]\n  (?:[^@<>*/]|\\*[^/])*\n)\n(?:\n  \\s*\n  (<)\n  ([^>\\s]+)\n  (>)\n)?",
					"captures": {
						"1": {
							"name": "storage.type.class.aldendoc"
						},
						"2": {
							"name": "punctuation.definition.block.tag.aldendoc"
						},
						"3": {
							"name": "entity.name.type.instance.aldendoc"
						},
						"4": {
							"name": "punctuation.definition.bracket.angle.begin.aldendoc"
						},
						"5": {
							"name": "constant.other.email.link.underline.aldendoc"
						},
						"6": {
							"name": "punctuation.definition.bracket.angle.end.aldendoc"
						}
					}
				},
				{
					"match": "(?x)\n((@)borrows) \\s+\n((?:[^@\\s*/]|\\*[^/])+)    # <that namepath>\n\\s+ (as) \\s+              # as\n((?:[^@\\s*/]|\\*[^/])+)    # <this namepath>",
					"captures": {
						"1": {
							"name": "storage.type.class.aldendoc"
						},
						"2": {
							"name": "punctuation.definition.block.tag.aldendoc"
						},
						"3": {
							"name": "entity.name.type.instance.aldendoc"
						},
						"4": {
							"name": "keyword.operator.control.aldendoc"
						},
						"5": {
							"name": "entity.name.type.instance.aldendoc"
						}
					}
				},
				{
					"name": "meta.example.aldendoc",
					"begin": "((@)example)\\s+",
					"end": "(?=@|\\*/)",
					"beginCaptures": {
						"1": {
							"name": "storage.type.class.aldendoc"
						},
						"2": {
							"name": "punctuation.definition.block.tag.aldendoc"
						}
					},
					"patterns": [
						{
							"match": "^\\s\\*\\s+"
						},
						{
							"contentName": "constant.other.description.aldendoc",
							"begin": "\\G(<)caption(>)",
							"beginCaptures": {
								"0": {
									"name": "entity.name.tag.inline.aldendoc"
								},
								"1": {
									"name": "punctuation.definition.bracket.angle.begin.aldendoc"
								},
								"2": {
									"name": "punctuation.definition.bracket.angle.end.aldendoc"
								}
							},
							"end": "(</)caption(>)|(?=\\*/)",
							"endCaptures": {
								"0": {
									"name": "entity.name.tag.inline.aldendoc"
								},
								"1": {
									"name": "punctuation.definition.bracket.angle.begin.aldendoc"
								},
								"2": {
									"name": "punctuation.definition.bracket.angle.end.aldendoc"
								}
							}
						},
						{
							"match": "[^\\s@*](?:[^*]|\\*[^/])*",
							"captures": {
								"0": {
									"name": "source.embedded.alden"
								}
							}
						}
					]
				},
				{
					"match": "(?x) ((@)kind) \\s+ (class|constant|event|external|file|function|member|mixin|module|namespace|typedef) \\b",
					"captures": {
						"1": {
							"name": "storage.type.class.aldendoc"
						},
						"2": {
							"name": "punctuation.definition.block.tag.aldendoc"
						},
						"3": {
							"name": "constant.language.symbol-type.aldendoc"
						}
					}
				},
				{
					"match": "(?x)\n((@)see)\n\\s+\n(?:\n  # URL\n  (\n    (?=https?://)\n    (?:[^\\s*]|\\*[^/])+\n  )\n  |\n  # aldenDoc namepath\n  (\n    (?!\n      # Avoid matching bare URIs (also acceptable as links)\n      https?://\n      |\n      # Avoid matching {@inline tags}; we match those below\n      (?:\\[[^\\[\\]]*\\])? # Possible description [preceding]{@tag}\n      {@(?:link|linkcode|linkplain|tutorial)\\b\n    )\n    # Matched namepath\n    (?:[^@\\s*/]|\\*[^/])+\n  )\n)",
					"captures": {
						"1": {
							"name": "storage.type.class.aldendoc"
						},
						"2": {
							"name": "punctuation.definition.block.tag.aldendoc"
						},
						"3": {
							"name": "variable.other.link.underline.aldendoc"
						},
						"4": {
							"name": "entity.name.type.instance.aldendoc"
						}
					}
				},
				{
					"match": "(?x)\n((@)template)\n\\s+\n# One or more valid identifiers\n(\n  [A-Za-z_$]         # First character: non-numeric word character\n  [\\w$.\\[\\]]*        # Rest of identifier\n  (?:                # Possible list of additional identifiers\n    \\s* , \\s*\n    [A-Za-z_$]\n    [\\w$.\\[\\]]*\n  )*\n)",
					"captures": {
						"1": {
							"name": "storage.type.class.aldendoc"
						},
						"2": {
							"name": "punctuation.definition.block.tag.aldendoc"
						},
						"3": {
							"name": "variable.other.aldendoc"
						}
					}
				},
				{
					"match": "(?x)\n(\n  (@)\n  (?:arg|argument|const|constant|member|namespace|param|var)\n)\n\\s+\n(\n  [A-Za-z_$]\n  [\\w$.\\[\\]]*\n)",
					"captures": {
						"1": {
							"name": "storage.type.class.aldendoc"
						},
						"2": {
							"name": "punctuation.definition.block.tag.aldendoc"
						},
						"3": {
							"name": "variable.other.aldendoc"
						}
					}
				},
				{
					"begin": "((@)typedef)\\s+(?={)",
					"beginCaptures": {
						"1": {
							"name": "storage.type.class.aldendoc"
						},
						"2": {
							"name": "punctuation.definition.block.tag.aldendoc"
						}
					},
					"end": "(?=\\s|\\*/|[^{}\\[\\]A-Za-z_$])",
					"patterns": [
						{
							"include": "#aldendoctype"
						},
						{
							"name": "entity.name.type.instance.aldendoc",
							"match": "(?:[^@\\s*/]|\\*[^/])+"
						}
					]
				},
				{
					"begin": "((@)(?:arg|argument|const|constant|member|namespace|param|prop|property|var))\\s+(?={)",
					"beginCaptures": {
						"1": {
							"name": "storage.type.class.aldendoc"
						},
						"2": {
							"name": "punctuation.definition.block.tag.aldendoc"
						}
					},
					"end": "(?=\\s|\\*/|[^{}\\[\\]A-Za-z_$])",
					"patterns": [
						{
							"include": "#aldendoctype"
						},
						{
							"name": "variable.other.aldendoc",
							"match": "([A-Za-z_$][\\w$.\\[\\]]*)"
						},
						{
							"name": "variable.other.aldendoc",
							"match": "(?x)\n(\\[)\\s*\n[\\w$]+\n(?:\n  (?:\\[\\])?                                        # Foo[ ].bar properties within an array\n  \\.                                                # Foo.Bar namespaced parameter\n  [\\w$]+\n)*\n(?:\n  \\s*\n  (=)                                                # [foo=bar] Default parameter value\n  \\s*\n  (\n    # The inner regexes are to stop the match early at */ and to not stop at escaped quotes\n    (?>\n      \"(?:(?:\\*(?!/))|(?:\\\\(?!\"))|[^*\\\\])*?\" |                      # [foo=\"bar\"] Double-quoted\n      '(?:(?:\\*(?!/))|(?:\\\\(?!'))|[^*\\\\])*?' |                      # [foo='bar'] Single-quoted\n      \\[ (?:(?:\\*(?!/))|[^*])*? \\] |                                # [foo=[1,2]] Array literal\n      (?:(?:\\*(?!/))|\\s(?!\\s*\\])|\\[.*?(?:\\]|(?=\\*/))|[^*\\s\\[\\]])*   # Everything else\n    )*\n  )\n)?\n\\s*(?:(\\])((?:[^*\\s]|\\*[^\\s/])+)?|(?=\\*/))",
							"captures": {
								"1": {
									"name": "punctuation.definition.optional-value.begin.bracket.square.aldendoc"
								},
								"2": {
									"name": "keyword.operator.assignment.aldendoc"
								},
								"3": {
									"name": "source.embedded.alden"
								},
								"4": {
									"name": "punctuation.definition.optional-value.end.bracket.square.aldendoc"
								},
								"5": {
									"name": "invalid.illegal.syntax.aldendoc"
								}
							}
						}
					]
				},
				{
					"begin": "(?x)\n(\n  (@)\n  (?:define|enum|exception|export|extends|lends|implements|modifies\n  |namespace|private|protected|returns?|suppress|this|throws|type\n  |yields?)\n)\n\\s+(?={)",
					"beginCaptures": {
						"1": {
							"name": "storage.type.class.aldendoc"
						},
						"2": {
							"name": "punctuation.definition.block.tag.aldendoc"
						}
					},
					"end": "(?=\\s|\\*/|[^{}\\[\\]A-Za-z_$])",
					"patterns": [
						{
							"include": "#aldendoctype"
						}
					]
				},
				{
					"match": "(?x)\n(\n  (@)\n  (?:alias|augments|callback|constructs|emits|event|fires|exports?\n  |extends|external|function|func|host|lends|listens|interface|memberof!?\n  |method|module|mixes|mixin|name|requires|see|this|typedef|uses)\n)\n\\s+\n(\n  (?:\n    [^{}@\\s*] | \\*[^/]\n  )+\n)",
					"captures": {
						"1": {
							"name": "storage.type.class.aldendoc"
						},
						"2": {
							"name": "punctuation.definition.block.tag.aldendoc"
						},
						"3": {
							"name": "entity.name.type.instance.aldendoc"
						}
					}
				},
				{
					"contentName": "variable.other.aldendoc",
					"begin": "((@)(?:default(?:value)?|license|version))\\s+(([''\"]))",
					"beginCaptures": {
						"1": {
							"name": "storage.type.class.aldendoc"
						},
						"2": {
							"name": "punctuation.definition.block.tag.aldendoc"
						},
						"3": {
							"name": "variable.other.aldendoc"
						},
						"4": {
							"name": "punctuation.definition.string.begin.aldendoc"
						}
					},
					"end": "(\\3)|(?=$|\\*/)",
					"endCaptures": {
						"0": {
							"name": "variable.other.aldendoc"
						},
						"1": {
							"name": "punctuation.definition.string.end.aldendoc"
						}
					}
				},
				{
					"match": "((@)(?:default(?:value)?|license|tutorial|variation|version))\\s+([^\\s*]+)",
					"captures": {
						"1": {
							"name": "storage.type.class.aldendoc"
						},
						"2": {
							"name": "punctuation.definition.block.tag.aldendoc"
						},
						"3": {
							"name": "variable.other.aldendoc"
						}
					}
				},
				{
					"name": "storage.type.class.aldendoc",
					"match": "(?x) (@) (?:abstract|access|alias|api|arg|argument|async|attribute|augments|author|beta|borrows|bubbles |callback|chainable|class|classdesc|code|config|const|constant|constructor|constructs|copyright |default|defaultvalue|define|deprecated|desc|description|dict|emits|enum|event|example|exception |exports?|extends|extension(?:_?for)?|external|externs|file|fileoverview|final|fires|for|func |function|generator|global|hideconstructor|host|ignore|implements|implicitCast|inherit[Dd]oc |inner|instance|interface|internal|kind|lends|license|listens|main|member|memberof!?|method |mixes|mixins?|modifies|module|name|namespace|noalias|nocollapse|nocompile|nosideeffects |override|overview|package|param|polymer(?:Behavior)?|preserve|private|prop|property|protected |public|read[Oo]nly|record|require[ds]|returns?|see|since|static|struct|submodule|summary |suppress|template|this|throws|todo|tutorial|type|typedef|unrestricted|uses|var|variation |version|virtual|writeOnce|yields?) \\b",
					"captures": {
						"1": {
							"name": "punctuation.definition.block.tag.aldendoc"
						}
					}
				},
				{
					"include": "#inline-tags"
				},
				{
					"match": "((@)(?:[_$[:alpha:]][_$[:alnum:]]*))(?=\\s+)",
					"captures": {
						"1": {
							"name": "storage.type.class.aldendoc"
						},
						"2": {
							"name": "punctuation.definition.block.tag.aldendoc"
						}
					}
				}
			]
		},
		"inline-tags": {
			"patterns": [
				{
					"name": "constant.other.description.aldendoc",
					"match": "(\\[)[^\\]]+(\\])(?={@(?:link|linkcode|linkplain|tutorial))",
					"captures": {
						"1": {
							"name": "punctuation.definition.bracket.square.begin.aldendoc"
						},
						"2": {
							"name": "punctuation.definition.bracket.square.end.aldendoc"
						}
					}
				},
				{
					"name": "entity.name.type.instance.aldendoc",
					"begin": "({)((@)(?:link(?:code|plain)?|tutorial))\\s*",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.bracket.curly.begin.aldendoc"
						},
						"2": {
							"name": "storage.type.class.aldendoc"
						},
						"3": {
							"name": "punctuation.definition.inline.tag.aldendoc"
						}
					},
					"end": "}|(?=\\*/)",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.bracket.curly.end.aldendoc"
						}
					},
					"patterns": [
						{
							"match": "\\G((?=https?://)(?:[^|}\\s*]|\\*[/])+)(\\|)?",
							"captures": {
								"1": {
									"name": "variable.other.link.underline.aldendoc"
								},
								"2": {
									"name": "punctuation.separator.pipe.aldendoc"
								}
							}
						},
						{
							"match": "\\G((?:[^{}@\\s|*]|\\*[^/])+)(\\|)?",
							"captures": {
								"1": {
									"name": "variable.other.description.aldendoc"
								},
								"2": {
									"name": "punctuation.separator.pipe.aldendoc"
								}
							}
						}
					]
				}
			]
		},
		"aldendoctype": {
			"patterns": [
				{
					"contentName": "entity.name.type.instance.aldendoc",
					"begin": "\\G({)",
					"beginCaptures": {
						"0": {
							"name": "entity.name.type.instance.aldendoc"
						},
						"1": {
							"name": "punctuation.definition.bracket.curly.begin.aldendoc"
						}
					},
					"end": "((}))\\s*|(?=\\*/)",
					"endCaptures": {
						"1": {
							"name": "entity.name.type.instance.aldendoc"
						},
						"2": {
							"name": "punctuation.definition.bracket.curly.end.aldendoc"
						}
					},
					"patterns": [
						{
							"include": "#brackets"
						}
					]
				}
			]
		}
	},
	"scopeName": "source.alden"
}