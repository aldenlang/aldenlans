{
	"%schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "alden",
	"patterns": [
		{
			"include": "#keywords"
		},
		{
			"include": "#expression"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#f-string-double"
		},
		{
			"include": "#f-string-single"
		},
		{
			"include": "#f-string-backtick"
		},
		{
			"include": "#variables"
		},
		{
			"include": "#numbers"
		},
		{
			"include": "#comments"
		},
		{
			"include": "#operators"
		},
		{
			"include": "#functions"
		},
		{
			"include": "#constants"
		},
		{
			"include": "#punctuation"
		},
		{
			"include": "#identifiers"
		},
		{
			"include": "#escape_chars"
		}
	],
	"repository": {
		"keywords": {
			"patterns": [
				{
					"comment": "Single line comment",
					"name": "comment.line.number-sign.alden",
					"match": "#[^\n\r]*"
				},
				{
					"comment": "Keywords",
					"name": "keyword.control.alden",
					"match": "\\b(if|elif|else|then|endIf|task|endTask|object|module|endObject|class|endClass|def|end|for|endFor|in|as|return|break|to|continue|while|void|get|from|export)\\b"
				},
				{
					"comment": "Object properties",
					"name": "entity.name.type.object.property.alden",
					"match": "\\b(\\.\\w+)\\b"
				},
				{
					"comment": "Bool type",
					"name": "support.type.bool.alden",
					"match": "\\b(bool)\\b"
				},
				{
					"comment": "Number type",
					"name": "support.type.number.alden",
					"match": "\\b(number)\\b"
				},
				{
					"comment": "Integer type",
					"name": "support.type.integer.alden",
					"match": "\\b(int)\\b"
				},
				{
					"comment": "Float type",
					"name": "support.type.float.alden",
					"match": "\\b(float)\\b"
				},
				{
					"comment": "String type",
					"name": "support.type.string.alden",
					"match": "\\b(string)\\b"
				},
				{
					"comment": "List type",
					"name": "support.type.list.alden",
					"match": "\\b(list)\\b"
				},
				{
					"comment": "Object type",
					"name": "support.type.object.alden",
					"match": "\\b(Object)\\b"
				},
				{
					"comment": "Class type",
					"name": "support.type.class.alden",
					"match": "\\b(Class)\\b"
				},
				{
					"comment": "Format keyword",
					"name": "keyword.control.format.alden",
					"match": "\\bfm\\b"
				},
				{
					"comment": "Format braces",
					"name": "keyword.control.format.braces.alden",
					"match": "\\\"{w+}\\\""
				},
				{
					"comment": "Self keyword",
					"name": "keyword.control.self.alden",
					"match": "\\bself\\b"
				},
				{
					"comment": "Conditional operators",
					"name": "keyword.operator.conditional.alden",
					"match": "\\b(and|or|not)\\b"
				},
				{
					"comment": "Boolean literals",
					"name": "constant.language.boolean.alden",
					"match": "\\b(true|false)\\b"
				},
				{
					"comment": "None literal",
					"name": "constant.language.none.alden",
					"match": "\\b(none)\\b"
				},
				{
					"comment": "Binary literals",
					"name": "constant.numeric.binary.alden",
					"match": "0b[01]+"
				},
				{
					"comment": "Object colon",
					"name": "punctuation.separator.object.alden",
					"match": ":"
				},
				{
					"comment": "Integer literals",
					"name": "constant.numeric.integer.alden",
					"match": "\\b(0x[0-9a-fA-F]+|[0-9]+)\\b"
				},
				{
					"comment": "Float literals",
					"name": "constant.numeric.float.alden",
					"match": "\\b[0-9]+\\.[0-9]+\\b"
				},
				{
					"comment": "Declaration type",
					"name": "storage.type.declaration.alden",
					"match": "\\b(let|final)\\b"
				},
				{
					"comment": "Task name",
					"match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b\\(",
					"captures": {
						"1": {
							"name": "entity.name.function.alden"
						}
					}
				},
				{
					"comment": "@ taskname",
					"name": "keyword.control.alden",
					"match": "@"
				},
				{
					"comment": "Getter",
					"name": "keyword.operator.getter.alden",
					"match": "\\%"
				},
				{
					"comment": "Identifier",
					"name": "variable.name.alden",
					"match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
				}
			]
		},
		"expression": {
			"patterns": [
				{
					"include": "#expression-operators"
				},
				{
					"include": "#expression-paren"
				},
				{
					"include": "#expression-function"
				}
			]
		},
		"expression-operators": {
			"patterns": [
				{
					"comment": "unary operators",
					"name": "keyword.operator.unary.alden",
					"match": "\\b(\\+|-|\\!|\\~)\\b"
				},
				{
					"comment": "binary operators",
					"name": "keyword.operator.binary.alden",
					"match": "\\b(\\+|-|\\*|\\/|\\%|\\^|\\||\\&|\\<|\\>|\\=|\\<=|\\>=|\\!=|\\<\\>|\\<\\<|\\>\\>|\\=\\=|\\!\\=|\\=\\=\\=|\\!\\=\\=)\\b"
				},
				{
					"comment": "assignment operators",
					"name": "keyword.operator.assignment.alden",
					"match": "\\b(\\+=|\\-=|\\*=|\\/=|\\%=|\\^=|\\|=|\\&=|\\<=|\\>=|\\=)\\b"
				},
				{
					"comment": "comparison operators",
					"name": "keyword.operator.comparison.alden",
					"match": "\\b(\\<|\\>|\\<=|\\>=|\\=|\\<\\>|\\<\\<|\\>\\>|\\=\\=|\\!\\=|\\=\\=\\=|\\!\\=\\=)\\b"
				},
				{
					"comment": "logical operators",
					"name": "keyword.operator.logical.alden",
					"match": "\\b(\\||\\&|\\!)\\b"
				},
				{
					"comment": "bitwise operators",
					"name": "keyword.operator.bitwise.alden",
					"match": "\\b(\\^|\\&|\\|)\\b"
				},
				{
					"comment": "other operators",
					"name": "keyword.operator.other.alden",
					"match": "\\b(\\?|\\:|\\.)\\b"
				}
			]
		},
		"expression-paren": {
			"patterns": [
				{
					"comment": "parentheses",
					"name": "punctuation.section.parens.alden",
					"match": "\\(|\\)"
				}
			]
		},
		"expression-function": {
			"patterns": [
				{
					"name": "meta.expression.function.alden",
					"begin": "\\b(task)\\b",
					"captures": {
						"1": {
							"name": "storage.type.function.alden"
						}
					},
					"end": "\\b(\\()",
					"patterns": [
						{
							"include": "#expression-function-name"
						},
						{
							"include": "#expression-function-parameter"
						},
						{
							"include": "#expression-function-body"
						}
					]
				}
			]
		},
		"expression-function-name": {
			"patterns": [
				{
					"name": "entity.name.function.alden",
					"match": "\\b(@[\\w\\d_]+)\\b"
				}
			]
		},
		"expression-function-parameter": {
			"patterns": [
				{
					"name": "meta.expression.function.parameter.alden",
					"begin": "\\b(\\()",
					"end": "\\b(\\))"
				}
			]
		},
		"expression-function-body": {
			"patterns": [
				{
					"name": "meta.expression.function.body.alden",
					"begin": "\\b(\\{)\\b",
					"endCaptures": {
						"1": {
							"name": "punctuation.section.scope.alden"
						}
					},
					"end": "\\b(end)\\b",
					"patterns": [
						{
							"include": "#expression-function-body-content"
						}
					]
				}
			]
		},
		
		"f-string-backtick": {
			"patterns": [
				{
					"include": "#f-string-backtick-call"
				},
				{
					"name": "string.f-string-backtick.alden",
					"begin": "([_%[:alpha:]][_%[:alnum:]]*)?(`)",
					"beginCaptures": {
						"1": {
							"name": "entity.name.function.tagged-f-string-backtick.alden"
						},
						"2": {
							"name": "punctuation.definition.string.f-string-backtick.begin.alden"
						}
					},
					"end": "`",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.f-string-backtick.end.alden"
						}
					},
					"patterns": [
						{
							"include": "#f-string-backtick-substitution-element"
						}
					]
				}
			]
		},
		"f-string-backtick-call": {
			"patterns": [
				{
					"name": "string.f-string-backtick.alden",
					"begin": "(?=(([_%[:alpha:]][_%[:alnum:]]*\\s*\\??\\.\\s*)*|(\\??\\.\\s*)?)([_%[:alpha:]][_%[:alnum:]]*)(<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_%[:alpha:]][_%[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_%[:alpha:]][_%[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))(([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_%[:alpha:]][_%[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>)*(?<!=)\\>))*(?<!=)\\>)*(?<!=)>\\s*)?`)",
					"end": "(?=`)",
					"patterns": [
						{
							"begin": "(?=(([_%[:alpha:]][_%[:alnum:]]*\\s*\\??\\.\\s*)*|(\\??\\.\\s*)?)([_%[:alpha:]][_%[:alnum:]]*))",
							"end": "(?=(<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_%[:alpha:]][_%[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_%[:alpha:]][_%[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))(([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_%[:alpha:]][_%[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>)*(?<!=)\\>))*(?<!=)\\>)*(?<!=)>\\s*)?`)",
							"patterns": [
								{
									"include": "#support-function-call-identifiers"
								},
								{
									"name": "entity.name.function.tagged-f-string-backtick.alden",
									"match": "([_%[:alpha:]][_%[:alnum:]]*)"
								}
							]
						},
						{
							"include": "#type-arguments"
						}
					]
				},
				{
					"name": "string.f-string-backtick.alden",
					"begin": "([_%[:alpha:]][_%[:alnum:]]*)?\\s*(?=(<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_%[:alpha:]][_%[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_%[:alpha:]][_%[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))(([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_%[:alpha:]][_%[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>)*(?<!=)\\>))*(?<!=)\\>)*(?<!=)>\\s*)`)",
					"beginCaptures": {
						"1": {
							"name": "entity.name.function.tagged-f-string-backtick.alden"
						}
					},
					"end": "(?=`)",
					"patterns": [
						{
							"include": "#type-arguments"
						}
					]
				}
			]
		},
		"f-string-backtick-substitution-element": {
			"name": "meta.f-string-backtick.expression.alden",
			"begin": "\\%\\{",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.f-string-backtick-expression.begin.alden"
				}
			},
			"end": "\\}",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.f-string-backtick-expression.end.alden"
				}
			},
			"patterns": [
				{
					"include": "#expression"
				}
			],
			"contentName": "meta.embedded.line.alden"
		},
		"f-string-backtick-type": {
			"patterns": [
				{
					"include": "#f-string-backtick-call"
				},
				{
					"name": "string.f-string-backtick.alden",
					"begin": "([_%[:alpha:]][_%[:alnum:]]*)?(`)",
					"beginCaptures": {
						"1": {
							"name": "entity.name.function.tagged-f-string-backtick.alden"
						},
						"2": {
							"name": "punctuation.definition.string.f-string-backtick.begin.alden"
						}
					},
					"end": "`",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.f-string-backtick.end.alden"
						}
					},
					"patterns": [
						{
							"include": "#f-string-backtick-type-substitution-element"
						},
						{
							"include": "#string-character-escape"
						}
					]
				}
			]
		},
		"f-string-backtick-type-substitution-element": {
			"name": "meta.f-string-backtick.expression.alden",
			"begin": "\\%\\{",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.f-string-backtick-expression.begin.alden"
				}
			},
			"end": "\\}",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.f-string-backtick-expression.end.alden"
				}
			},
			"patterns": [
				{
					"include": "#type"
				}
			],
			"contentName": "meta.embedded.line.alden"
		},
		"f-string-double": {
			"patterns": [
				{
					"include": "#f-string-double-call"
				},
				{
					"name": "string.f-string-double.alden",
					"begin": "([_%[:alpha:]][_%[:alnum:]]*)?(\")",
					"beginCaptures": {
						"1": {
							"name": "entity.name.function.tagged-f-string-double.alden"
						},
						"2": {
							"name": "punctuation.definition.string.f-string-double.begin.alden"
						}
					},
					"end": "\"",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.f-string-double.end.alden"
						}
					},
					"patterns": [
						{
							"include": "#f-string-double-substitution-element"
						}
					]
				}
			]
		},
		"f-string-double-call": {
			"patterns": [
				{
					"name": "string.f-string-double.alden",
					"begin": "(?=(([_%[:alpha:]][_%[:alnum:]]*\\s*\\??\\.\\s*)*|(\\??\\.\\s*)?)([_%[:alpha:]][_%[:alnum:]]*)(<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_%[:alpha:]][_%[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\\"([^\\\"\\\\]|\\\\.)*\\\"))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_%[:alpha:]][_%[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\\"([^\\\"\\\\]|\\\\.)*\\\"))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))(([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_%[:alpha:]][_%[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\\"([^\\\"\\\\]|\\\\.)*\\\"))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>)*(?<!=)\\>))*(?<!=)\\>)*(?<!=)>\\s*)?\")",
					"end": "(?=\")",
					"patterns": [
						{
							"begin": "(?=(([_%[:alpha:]][_%[:alnum:]]*\\s*\\??\\.\\s*)*|(\\??\\.\\s*)?)([_%[:alpha:]][_%[:alnum:]]*))",
							"end": "(?=(<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_%[:alpha:]][_%[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\\"([^\\\"\\\\]|\\\\.)*\\\"))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_%[:alpha:]][_%[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\\"([^\\\"\\\\]|\\\\.)*\\\"))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))(([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_%[:alpha:]][_%[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\\"([^\\\"\\\\]|\\\\.)*\\\"))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>)*(?<!=)\\>))*(?<!=)\\>)*(?<!=)>\\s*)?\")",
							"patterns": [
								{
									"include": "#support-function-call-identifiers"
								},
								{
									"name": "entity.name.function.tagged-f-string-double.alden",
									"match": "([_%[:alpha:]][_%[:alnum:]]*)"
								}
							]
						},
						{
							"include": "#type-arguments"
						}
					]
				},
				{
					"name": "string.f-string-double.alden",
					"begin": "([_%[:alpha:]][_%[:alnum:]]*)?\\s*(?=(<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_%[:alpha:]][_%[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\\"([^\\\"\\\\]|\\\\.)*\\\"))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_%[:alpha:]][_%[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\\"([^\\\"\\\\]|\\\\.)*\\\"))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))(([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_%[:alpha:]][_%[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\\"([^\\\"\\\\]|\\\\.)*\\\"))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>)*(?<!=)\\>))*(?<!=)\\>)*(?<!=)>\\s*)\")",
					"beginCaptures": {
						"0": {
							"name": "entity.name.function.tagged-f-string-double.alden"
						}
					},
					"end": "(?=\")",
					"patterns": [
						{
							"include": "#type-arguments"
						}
					]
				}
			]
		},
		"f-string-double-substitution-element": {
			"name": "meta.f-string-double.expression.alden",
			"begin": "\\%\\{",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.f-string-double-expression.begin.alden"
				}
			},
			"end": "\\}",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.f-string-double-expression.end.alden"
				}
			},
			"patterns": [
				{
					"include": "#expression"
				}
			],
			"contentName": "meta.embedded.line.alden"
		},
		"f-string-double-type": {
			"patterns": [
				{
					"include": "#f-string-double-call"
				},
				{
					"name": "string.f-string-double.alden",
					"begin": "([_%[:alpha:]][_%[:alnum:]]*)?(\")",
					"beginCaptures": {
						"1": {
							"name": "entity.name.function.tagged-f-string-double.alden"
						},
						"2": {
							"name": "punctuation.definition.string.f-string-double.begin.alden"
						}
					},
					"end": "\"\"\"",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.f-string-double.end.alden"
						}
					},
					"patterns": [
						{
							"include": "#f-string-double-substitution-element"
						},
						{
							"include": "#string-character-escape"
						}
					]
				}
			]
		},
		"f-string-double-type-substitution-element": {
			"name": "meta.f-string-double.expression.alden",
			"begin": "\\%\\{",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.f-string-double-expression.begin.alden"
				}
			},
			"end": "\\}",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.f-string-double-expression.end.alden"
				}
			},
			"patterns": [
				{
					"include": "#type"
				}
			],
			"contentName": "meta.embedded.line.alden"
		},
		"f-string-single": {
			"patterns": [
				{
					"include": "#f-string-single-call"
				},
				{
					"name": "string.f-string-single.alden",
					"begin": "([_%[:alpha:]][_%[:alnum:]]*)?(')",
					"beginCaptures": {
						"1": {
							"name": "entity.name.function.tagged-f-string-single.alden"
						},
						"2": {
							"name": "punctuation.definition.string.f-string-single.begin.alden"
						}
					},
					"end": "'",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.f-string-single.end.alden"
						}
					},
					"patterns": [
						{
							"include": "#f-string-single-substitution-element"
						}
					]
				}
			]
		},
		"f-string-single-call": {
			"patterns": [
				{
					"name": "string.f-string-single.alden",
					"begin": "(?=(([_%[:alpha:]][_%[:alnum:]]*\\s*\\??\\.\\s*)*|(\\??\\.\\s*)?)([_%[:alpha:]][_%[:alnum:]]*)(<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_%[:alpha:]][_%[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\'([^\\'\\\\]|\\\\.)*\\'))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_%[:alpha:]][_%[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\'([^\\'\\\\]|\\\\.)*\\'))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))(([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_%[:alpha:]][_%[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\'([^\\'\\\\]|\\\\.)*\\'))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>)*(?<!=)\\>))*(?<!=)\\>)*(?<!=)>\\s*)?')",
					"end": "(?=')",
					"patterns": [
						{
							"begin": "(?=(([_%[:alpha:]][_%[:alnum:]]*\\s*\\??\\.\\s*)*|(\\??\\.\\s*)?)([_%[:alpha:]][_%[:alnum:]]*))",
							"end": "(?=(<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_%[:alpha:]][_%[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_%[:alpha:]][_%[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))(([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_%[:alpha:]][_%[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>)*(?<!=)\\>))*(?<!=)\\>)*(?<!=)>\\s*)?`)",
							"patterns": [
								{
									"include": "#support-function-call-identifiers"
								},
								{
									"name": "entity.name.function.tagged-f-string-single.alden",
									"match": "([_%[:alpha:]][_%[:alnum:]]*)"
								}
							]
						},
						{
							"include": "#type-arguments"
						}
					]
				},
				{
					"name": "string.f-string-single.alden",
					"begin": "([_%[:alpha:]][_%[:alnum:]]*)?\\s*(?=(<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_%[:alpha:]][_%[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_%[:alpha:]][_%[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))(([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_%[:alpha:]][_%[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>)*(?<!=)\\>))*(?<!=)\\>)*(?<!=)>\\s*)`)",
					"beginCaptures": {
						"1": {
							"name": "entity.name.function.tagged-f-string-single.alden"
						}
					},
					"end": "(?=`)",
					"patterns": [
						{
							"include": "#type-arguments"
						}
					]
				}
			]
		},
		"f-string-single-substitution-element": {
			"patterns": [
				{
					"name": "meta.f-string-single.expression.alden",
					"begin": "\\%\\{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.f-string-single-expression.begin.alden"
						}
					},
					"end": "\\}",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.f-string-single-expression.end.alden"
						}
					},
					"patterns": [
						{
							"include": "#expression"
						}
					],
					"contentName": "meta.embedded.line.alden"
				}
			]
		},
		"f-string-single-type": {
			"patterns": [
				{
					"include": "#f-string-single-call"
				},
				{
					"name": "string.f-string-single-type.alden",
					"begin": "([_%[:alpha:]][_%[:alnum:]]*)?(')",
					"beginCaptures": {
						"1": {
							"name": "entity.name.function.tagged-f-string-single.alden"
						},
						"2": {
							"name": "punctuation.definition.string.f-string-single.begin.alden"
						}
					},
					"end": "'",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.f-string-single.end.alden"
						}
					},
					"patterns": [
						{
							"include": "#f-string-single-substitution-element"
						},
						{
							"include": "#string-character-escape"
						}
					]
				}
			]
		},
		"f-string-single-type-substitution-element": {
			"patterns": [
				{
					"name": "meta.f-string-single.expression.alden",
					"begin": "\\%\\{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.f-string-single-expression.begin.alden"
						}
					},
					"end": "\\}",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.f-string-single-expression.end.alden"
						}
					},
					"patterns": [
						{
							"include": "#type"
						}
					],
					"contentName": "meta.embedded.line.alden"
				}
			]
		},
		"variables": {
			"patterns": [
				{
					"comment": "variables",
					"name": "variable.other.alden",
					"match": "\\b(?<!(?<!\\.)\\.)(?:r#(?!(self)))?[a-z0-9_]+\\b"
				}
			]
		},
		"numbers": {
			"patterns": [
				{
					"name": "constant.numeric.integer.myscript",
					"match": "\\b(\\d+)\\b"
				},
				{
					"name": "constant.numeric.decimal.myscript",
					"match": "\\b(\\d+\\.\\d+)\\b"
				}
			]
		},
		"operators": {
			"patterns": [
				{
					"name": "keyword.operator.arithmetic.alden",
					"match": "\\+|\\-|\\*|\\/|\\%|\\^|\\&|\\||\\<|\\>|\\=|\\!|\\~"
				},
				{
					"name": "keyword.operator.comparison.alden",
					"match": "\\=\\=|\\!\\=|\\>|\\>\\=|\\<|\\<\\="
				},
				{
					"name": "keyword.operator.logical.alden",
					"match": "\\&\\&|\\|\\|"
				},
				{
					"name": "keyword.operator.assignment.alden",
					"match": "\\="
				}
			]
		},
		
		"literal": {
			"patterns": [
				{
					"include":  "#array-literal"
				},
				{
					"include":  "#boolean-literal"
				},
				{
					"include":  "#null-literal"
				},
				{
					"include":  "#undefined-literal"
				},
				{
					"include":  "#number-literal"
				}
			]
		},
		"array-literal": {
			"patterns": [
				{
					"name": "meta.array.alden",
					"begin": "\\[",
					"end": "\\]",
					"patterns": [
						{
							"include": "#literal"
						}
					]
				}
			]
		}
	},
	"scopeName": "source.alden"
}